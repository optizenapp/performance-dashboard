'use client';

import { useState, useMemo, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Upload, BarChart3, TrendingUp } from 'lucide-react';
import { NormalizedMetric, FilterOptions, ChartDataPoint, SectionFilters } from '@/lib/types';
import { getDateRangePreset } from '@/lib/data-utils';
import { SOURCES } from '@/lib/types';
import { prepareChartData, extractFilterOptions, normalizeAhrefsData } from '@/lib/data-utils';
import { parseAhrefsCSV, validateCSVFile, readFileAsText } from '@/lib/csv-parser';
import { SectionFilterPanel } from '@/components/filters/section-filter-panel';
import { PerformanceChart } from '@/components/charts/performance-chart';
import { TabbedDataTable } from '@/components/tables/tabbed-data-table';
import { GSCConnection } from '@/components/gsc/gsc-connection';
import { PerformanceClusters } from '@/components/clusters/performance-clusters';
import { saveDataToStorage, loadDataFromStorage, hasStoredData, clearStoredData } from '@/lib/data-storage';
import { ClientOnly } from '@/components/client-only';
import { useMongoData } from '@/hooks/useMongoData';
import { useGSCData } from '@/hooks/useGSCData';
import { useGSC } from '@/hooks/useGSC';

const emptyDateRange = { startDate: '', endDate: '' };

export default function Dashboard() {
  const [data, setData] = useState<NormalizedMetric[]>([]);
  const [loading, setLoading] = useState(false);
  const [selectedChartMetrics, setSelectedChartMetrics] = useState<string[]>(['clicks']);

  // Get GSC connection state
  const { selectedSite, isAuthenticated } = useGSC();

  // Remove 'volume' and 'traffic' from chart metrics if they exist (Ahrefs point-in-time data not suitable for time series)
  useEffect(() => {
    if (selectedChartMetrics.includes('volume') || selectedChartMetrics.includes('traffic')) {
      setSelectedChartMetrics(prev => prev.filter(metric => metric !== 'volume' && metric !== 'traffic'));
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // Remove dependency to prevent infinite loop
  const [filters] = useState<FilterOptions>({
    dateRange: getDateRangePreset('last_90_days'),
    metrics: ['clicks', 'impressions', 'ctr', 'position'],
    sources: [SOURCES.GSC, SOURCES.AHREFS],
    enableComparison: false,
    comparisonPreset: undefined,
    comparisonDateRange: undefined,
  });


  const [sectionFilters, setSectionFilters] = useState({
    chart: { dateRange: getDateRangePreset('last_90_days'), enableComparison: false, comparisonPreset: undefined, comparisonDateRange: undefined },
    quickView: { dateRange: getDateRangePreset('last_90_days'), enableComparison: false, comparisonPreset: undefined, comparisonDateRange: undefined },
    table: { dateRange: getDateRangePreset('last_90_days'), enableComparison: false, comparisonPreset: undefined, comparisonDateRange: undefined },
  });

  console.log('🔍 Current section filters state:', {
    table: sectionFilters.table,
    chart: sectionFilters.chart,
    quickView: sectionFilters.quickView
  });

  // Fetch Quick Overview data directly from GSC API on-demand
  const quickViewData = useGSCData({
    siteUrl: selectedSite || undefined,
    startDate: sectionFilters.quickView.dateRange.startDate,
    endDate: sectionFilters.quickView.dateRange.endDate,
    dimensions: ['date', 'query'], // Get both time series and query data for comprehensive stats
    timeSeries: false, // Use aggregated data for quick overview
    enabled: !!(isAuthenticated && selectedSite && sectionFilters.quickView.dateRange.startDate && sectionFilters.quickView.dateRange.endDate)
  });

  // Debug: Log when Quick Overview filters change
  useEffect(() => {
    console.log('🔄 Quick Overview filters changed:', {
      startDate: sectionFilters.quickView.dateRange.startDate,
      endDate: sectionFilters.quickView.dateRange.endDate,
      enabled: !!(sectionFilters.quickView.dateRange.startDate && sectionFilters.quickView.dateRange.endDate),
      dataLoading: quickViewData.loading,
      dataCount: quickViewData.data?.length || 0
    });
  }, [sectionFilters.quickView.dateRange.startDate, sectionFilters.quickView.dateRange.endDate, quickViewData.loading, quickViewData.data?.length]);

  // TEMPORARILY DISABLED: Fetch Table data on-demand based on its filters
  // const tableData = useMongoData({
  //   startDate: sectionFilters.table.dateRange.startDate,
  //   endDate: sectionFilters.table.dateRange.endDate,
  //   source: 'gsc',
  //   limit: 100000, // Higher limit for table
  //   enabled: !!(sectionFilters.table.dateRange.startDate && sectionFilters.table.dateRange.endDate)
  // });

  // TEMPORARILY DISABLED: Fetch Chart data on-demand based on its filters
  // const chartData = useMongoData({
  //   startDate: sectionFilters.chart.dateRange.startDate,
  //   endDate: sectionFilters.chart.dateRange.endDate,
  //   source: 'gsc',
  //   limit: 50000,
  //   enabled: !!(sectionFilters.chart.dateRange.startDate && sectionFilters.chart.dateRange.endDate)
  // });

  // Temporary empty data objects to prevent errors
  const tableData = { data: [], loading: false, error: null, refetch: () => {} };
  const chartData = { data: [], loading: false, error: null, refetch: () => {} };

  // Set default date range and load existing data on client-side
  useEffect(() => {
    console.log('🚀 useEffect initializeDashboard starting...');
    const initializeDashboard = async () => {
      // Use a wider default range to capture more imported data
      const defaultDateRange = getDateRangePreset('last_90_days');
    console.log('🔧 Setting default section filters:', {
      defaultDateRange,
        preset: 'last_90_days'
    });
    setSectionFilters({
      chart: { dateRange: defaultDateRange, enableComparison: false, comparisonPreset: undefined, comparisonDateRange: undefined },
      quickView: { dateRange: defaultDateRange, enableComparison: false, comparisonPreset: undefined, comparisonDateRange: undefined },
      table: { dateRange: defaultDateRange, enableComparison: false, comparisonPreset: undefined, comparisonDateRange: undefined },
    });

      // Try to load existing data from MongoDB
      try {
        console.log('🔄 Checking for existing data in MongoDB...');
        console.log('🌐 Making API call to: /api/gsc/data-mongo?limit=500000&source=gsc&initialLoad=true');
        const dataResponse = await fetch('/api/gsc/data-mongo?limit=500000&source=gsc&initialLoad=true');
        
        if (dataResponse.ok) {
          const dataResult = await dataResponse.json();
          
          if (dataResult.data && dataResult.data.length > 0) {
            console.log('✅ Found existing data in MongoDB:', {
              recordCount: dataResult.data.length,
              sources: [...new Set(dataResult.data.map((item: any) => item.source))],
              sampleData: dataResult.data.slice(0, 5),
              metricTypes: [...new Set(dataResult.data.map((item: any) => item.metric_type))],
              uniqueDates: [...new Set(dataResult.data.map((item: any) => item.date))].sort(),
              sampleWithValues: dataResult.data.slice(0, 3).map(item => ({
                date: item.date,
                query: item.query,
                metric_type: item.metric_type,
                value: item.value,
                url: item.url
              }))
            });
            
            // Auto-adjust section filters to show all data FIRST
            const dates = dataResult.data.map((item: any) => item.date).sort();
            const earliestDate = dates[0];
            const latestDate = dates[dates.length - 1];
            
            const dataDateRange = {
              startDate: earliestDate,
              endDate: latestDate
            };
            
            console.log('📅 Setting section filters to data range:', dataDateRange);
            
            setSectionFilters({
              chart: { dateRange: dataDateRange, enableComparison: false, comparisonPreset: undefined, comparisonDateRange: undefined },
              quickView: { dateRange: dataDateRange, enableComparison: false, comparisonPreset: undefined, comparisonDateRange: undefined },
              table: { dateRange: dataDateRange, enableComparison: false, comparisonPreset: undefined, comparisonDateRange: undefined },
            });
            
            // Then load the data into the dashboard
            setData(dataResult.data);
            
            console.log('📊 Data loaded into state:', {
              dataLength: dataResult.data.length,
              firstFewItems: dataResult.data.slice(0, 3),
              dateRange: dataDateRange
            });
          } else {
            console.log('ℹ️ No existing data found in MongoDB');
          }
        } else {
          console.log('ℹ️ Could not check for existing data (API not available)');
        }
      } catch (error) {
        console.log('ℹ️ Could not load existing data:', error);
        // This is fine - user can import new data
        // But ensure section filters have valid default dates so they don't filter everything out
        const fallbackDateRange = getDateRangePreset('last_90_days');
        setSectionFilters({
          chart: { dateRange: fallbackDateRange, enableComparison: false, comparisonPreset: undefined, comparisonDateRange: undefined },
          quickView: { dateRange: fallbackDateRange, enableComparison: false, comparisonPreset: undefined, comparisonDateRange: undefined },
          table: { dateRange: fallbackDateRange, enableComparison: false, comparisonPreset: undefined, comparisonDateRange: undefined },
        });
        console.log('🔧 Set fallback section filters due to API error:', fallbackDateRange);
      }
    };

    initializeDashboard();
  }, []);

  // Load persisted data on mount
  useEffect(() => {
    const loadPersistedData = async () => {
      if (hasStoredData()) {
        try {
          setLoading(true);
          const persistedData = await loadDataFromStorage();
          if (persistedData.length > 0) {
            setData(persistedData);
            console.log(`Loaded ${persistedData.length} persisted data points`);
          }
        } catch (error) {
          console.error('Failed to load persisted data:', error);
        } finally {
          setLoading(false);
        }
      }
    };

    loadPersistedData();
  }, []);

  // Calculate filtered data
  const filteredData = useMemo(() => {
    console.log('🔍 Filtering data with current filters:', {
      totalItems: data.length,
      dateRange: filters.dateRange,
      gscItemsWithDates: data.filter(item => item.source === SOURCES.GSC).map(item => ({
        date: item.date,
        query: item.query?.substring(0, 20) + '...'
      })).slice(0, 5)
    });

    return data.filter(item => {
      // Date range filter
      const itemDate = new Date(item.date);
      const startDate = new Date(filters.dateRange.startDate);
      const endDate = new Date(filters.dateRange.endDate);
      
      const dateMatch = itemDate >= startDate && itemDate <= endDate;
      
      if (!dateMatch) {
        if (item.source === SOURCES.GSC && data.filter(d => d.source === SOURCES.GSC).indexOf(item) < 5) {
          console.log('❌ Date filter failed for item:', {
            itemDate: item.date,
            itemDateParsed: itemDate.toISOString(),
            startDate: filters.dateRange.startDate,
            endDate: filters.dateRange.endDate,
            query: item.query?.substring(0, 20),
            source: item.source
          });
        }
        return false;
      }
      
      // Query filter - if queries are selected, item must match at least one
      if (filters.queries && filters.queries.length > 0) {
        const matchesQuery = filters.queries.some(filterQuery =>
          item.query?.toLowerCase().includes(filterQuery.toLowerCase())
        );
        if (!matchesQuery) return false;
      }
      
      // URL filter - if URLs are selected, item must match at least one
      if (filters.urls && filters.urls.length > 0) {
        const matchesUrl = filters.urls.some(filterUrl =>
          item.url?.toLowerCase().includes(filterUrl.toLowerCase())
        );
        if (!matchesUrl) return false;
      }
      
      // Source filter
      const sourceMatch = filters.sources.includes(item.source);
      if (!sourceMatch) {
        if (item.source === SOURCES.GSC && data.filter(d => d.source === SOURCES.GSC).indexOf(item) < 5) {
          console.log('❌ Source filter failed for item:', {
            itemSource: item.source,
            allowedSources: filters.sources,
            query: item.query?.substring(0, 20),
          });
        }
        return false;
      }
      
      // If we get here, all filters passed
      if (item.source === SOURCES.GSC && data.filter(d => d.source === SOURCES.GSC).indexOf(item) < 5) {
        console.log('✅ Item passed all filters:', {
          date: item.date,
          source: item.source,
          query: item.query?.substring(0, 20)
        });
      }
      
      return true;
    });
  }, [data, filters]);

  // Calculate summary statistics from filtered data
  // Legacy summaryStats - no longer used but kept for compatibility
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const summaryStats = useMemo(() => {
    console.log('🔍 Calculating summaryStats:', {
      dataLength: data.length,
      filteredDataLength: filteredData.length,
      gscCount: data.filter(item => item.source === SOURCES.GSC).length,
      ahrefsCount: data.filter(item => item.source === SOURCES.AHREFS).length,
      dataSample: data.slice(0, 3),
      filteredSample: filteredData.slice(0, 3)
    });

    const stats = {
      totalClicks: 0,
      totalImpressions: 0,
      avgCTR: 0,
      avgPosition: 0,
      totalVolume: 0,
      totalTraffic: 0,
    };

    if (filteredData.length === 0) {
      console.log('⚠️ No filtered data available for summary stats');
      return stats;
    }

    let positionSum = 0;
    let positionCount = 0;
    let ctrSum = 0;
    let ctrCount = 0;

    filteredData.forEach(item => {
      stats.totalClicks += item.clicks || 0;
      stats.totalImpressions += item.impressions || 0;
      stats.totalVolume += item.volume || 0;
      stats.totalTraffic += item.traffic || 0;

      // Only use GSC data for position calculation (Average Position)
      if (item.position && item.position > 0 && item.source === SOURCES.GSC) {
        positionSum += item.position;
        positionCount++;
      }

      if (item.ctr !== undefined && item.ctr !== null) {
        ctrSum += item.ctr;
        ctrCount++;
      }
    });

    stats.avgPosition = positionCount > 0 ? positionSum / positionCount : 0;
    stats.avgCTR = ctrCount > 0 ? ctrSum / ctrCount : 0;

    return stats;
  }, [data, filteredData]);

  // Derived data - legacy filter options, no longer used
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const filterOptions = useMemo(() => extractFilterOptions(data), [data]); // Use all data for filter options

  // Section-specific filtered data
  const sectionFilteredData = useMemo(() => {
    const filterDataBySection = (sectionFilters: SectionFilters) => {
      const startDate = new Date(sectionFilters.dateRange.startDate);
      const endDate = new Date(sectionFilters.dateRange.endDate);
      
      return data.filter(item => {
        const itemDate = new Date(item.date);
        const dateMatch = itemDate >= startDate && itemDate <= endDate;
        
        // Apply global source filter
        const sourceMatch = filters.sources.includes(item.source);
        
        return dateMatch && sourceMatch;
      });
    };

    return {
      chart: filterDataBySection(sectionFilters.chart),
      quickView: filterDataBySection(sectionFilters.quickView),
      table: filterDataBySection(sectionFilters.table),
    };
  }, [data, sectionFilters, filters.sources]);
  // Chart data is now fetched on-demand via useMongoData hook above

  // Section-specific summary stats for Quick Overview
  const quickViewStats = useMemo(() => {
    const quickViewFilteredData = quickViewData.data || [];
    
    // Early return if no data to avoid processing
    if (quickViewFilteredData.length === 0) {
      console.log('⚠️ No Quick Overview data - returning empty stats');
      return {
        totalClicks: 0,
        totalImpressions: 0,
        avgCTR: 0,
        avgPosition: 0,
        totalVolume: 0,
        totalTraffic: 0,
      };
    }

    // Limit processing to prevent freezing - sample large datasets
    const maxProcessingSize = 10000;
    const dataToProcess = quickViewFilteredData.length > maxProcessingSize 
      ? quickViewFilteredData.slice(0, maxProcessingSize)
      : quickViewFilteredData;
    
    console.log('🔍 Calculating Quick Overview stats (optimized):', {
      startDate: sectionFilters.quickView.dateRange.startDate,
      endDate: sectionFilters.quickView.dateRange.endDate,
      totalDataPoints: quickViewFilteredData.length,
      processingDataPoints: dataToProcess.length,
      sampled: quickViewFilteredData.length > maxProcessingSize,
      loading: quickViewData.loading,
      dateRangeInDays: (sectionFilters.quickView.dateRange.startDate && sectionFilters.quickView.dateRange.endDate) 
        ? Math.ceil((new Date(sectionFilters.quickView.dateRange.endDate).getTime() - new Date(sectionFilters.quickView.dateRange.startDate).getTime()) / (1000 * 60 * 60 * 24))
        : 0,
      dateRangeParsed: {
        startDateObj: sectionFilters.quickView.dateRange.startDate ? new Date(sectionFilters.quickView.dateRange.startDate) : null,
        endDateObj: sectionFilters.quickView.dateRange.endDate ? new Date(sectionFilters.quickView.dateRange.endDate) : null,
        startDateISO: sectionFilters.quickView.dateRange.startDate ? new Date(sectionFilters.quickView.dateRange.startDate).toISOString() : null,
        endDateISO: sectionFilters.quickView.dateRange.endDate ? new Date(sectionFilters.quickView.dateRange.endDate).toISOString() : null,
        startDateLocal: sectionFilters.quickView.dateRange.startDate ? new Date(sectionFilters.quickView.dateRange.startDate).toLocaleDateString() : null,
        endDateLocal: sectionFilters.quickView.dateRange.endDate ? new Date(sectionFilters.quickView.dateRange.endDate).toLocaleDateString() : null
      }
    });

    // Simplified, fast calculation using reduce instead of multiple forEach loops
    const stats = dataToProcess.reduce((acc, item) => {
      if (item.source === SOURCES.GSC) {
        acc.totalClicks += item.clicks || 0;
        acc.totalImpressions += item.impressions || 0;
        // Simple position average (not weighted - for performance)
        if (item.position && item.position > 0) {
          acc.positionSum += item.position;
          acc.positionCount += 1;
        }
      } else if (item.source === SOURCES.AHREFS) {
        acc.totalVolume += item.volume || 0;
        acc.totalTraffic += item.traffic || 0;
      }
      return acc;
    }, {
      totalClicks: 0,
      totalImpressions: 0,
      totalVolume: 0,
      totalTraffic: 0,
      positionSum: 0,
      positionCount: 0
    });

    // Calculate averages
    const avgCTR = stats.totalImpressions > 0 ? stats.totalClicks / stats.totalImpressions : 0;
    const avgPosition = stats.positionCount > 0 ? stats.positionSum / stats.positionCount : 0;

    const finalStats = {
      totalClicks: stats.totalClicks,
      totalImpressions: stats.totalImpressions,
      avgCTR,
      avgPosition,
      totalVolume: stats.totalVolume,
      totalTraffic: stats.totalTraffic,
    };

    console.log('📊 Quick Overview stats calculated (fast):', {
      totalClicks: finalStats.totalClicks,
      totalImpressions: finalStats.totalImpressions,
      avgCTR: (finalStats.avgCTR * 100).toFixed(2) + '%',
      avgPosition: finalStats.avgPosition.toFixed(2),
      dataProcessed: dataToProcess.length,
      totalAvailable: quickViewFilteredData.length
    });

    return finalStats;
  }, [quickViewData.data, sectionFilters.quickView.dateRange, sectionFilters.quickView.enableComparison, sectionFilters.quickView.comparisonPreset, quickViewData.loading]);

  // Comparison stats for Quick Overview (when comparison is enabled)
  const quickViewComparisonStats = useMemo(() => {
    if (!sectionFilters.quickView.enableComparison || !sectionFilters.quickView.comparisonDateRange) {
      return null;
    }
    // TODO: Implement comparison stats when needed
    return null;
  }, [sectionFilters.quickView.enableComparison, sectionFilters.quickView.comparisonDateRange]);

  // Handler functions for the component
      const actualLatest = new Date(
        quickViewFilteredData.reduce((max, item) => Math.max(max, new Date(item.date).getTime()), -Infinity)
      ).toISOString().split('T')[0];
      console.log('📅 Actual date range in filtered data:', {
        earliest: actualEarliest,
        latest: actualLatest,
        expectedStart: sectionFilters.quickView.dateRange.startDate,
        expectedEnd: sectionFilters.quickView.dateRange.endDate,
        matchesExpected: actualEarliest === sectionFilters.quickView.dateRange.startDate && actualLatest === sectionFilters.quickView.dateRange.endDate
      });
    }

    // Separate GSC time series data (for totals) from query-level data (for averages)
    const gscTimeSeriesData = quickViewFilteredData.filter(item => 
      item.source === SOURCES.GSC && 
      (item.query === 'Total' || item.query === '' || !item.query)
    );
    
    const gscQueryData = quickViewFilteredData.filter(item => 
      item.source === SOURCES.GSC && 
      item.query && 
      item.query !== 'Total' && 
      item.query !== ''
    );
    
    const ahrefsData = quickViewFilteredData.filter(item => item.source === SOURCES.AHREFS);
    
    console.log('📊 Data breakdown for Quick Overview:', {
      gscTimeSeries: gscTimeSeriesData.length,
      gscQueryLevel: gscQueryData.length, 
      ahrefs: ahrefsData.length,
      total: quickViewFilteredData.length,
      sampleTimeSeries: gscTimeSeriesData.slice(0, 3).map(item => ({
        date: item.date,
        clicks: item.clicks,
        impressions: item.impressions,
        query: item.query || 'Total'
      }))
    });

    // Calculate totals from GSC time series data (daily aggregates)
    gscTimeSeriesData.forEach(item => {
      stats.totalClicks += item.clicks || 0;
      stats.totalImpressions += item.impressions || 0;
    });
    
    // Add Ahrefs data for volume and traffic
    ahrefsData.forEach(item => {
      stats.totalVolume += item.volume || 0;
      stats.totalTraffic += item.traffic || 0;
    });

    // Calculate Average Position from query-level GSC data (using correct methodology)
    // Check date distribution in query-level data
    const queryDataDates = new Map<string, number>();
    gscQueryData.forEach(item => {
      const count = queryDataDates.get(item.date) || 0;
      queryDataDates.set(item.date, count + 1);
    });
    
    const timeSeriesDataDates = new Map<string, number>();
    gscTimeSeriesData.forEach(item => {
      const count = timeSeriesDataDates.get(item.date) || 0;
      timeSeriesDataDates.set(item.date, count + 1);
    });

    console.log('🎯 Average Position debugging:', {
      gscQueryDataCount: gscQueryData.length,
      gscQueryDataSample: gscQueryData.slice(0, 5).map(item => ({
        query: item.query?.substring(0, 30),
        position: item.position,
        date: item.date,
        hasPosition: !!item.position,
        positionType: typeof item.position,
        positionValue: item.position
      })),
      queryDataDateDistribution: Object.fromEntries(queryDataDates.entries()),
      timeSeriesDateDistribution: Object.fromEntries(timeSeriesDataDates.entries()),
      dateRangeFilter: {
        start: sectionFilters.quickView.dateRange.startDate,
        end: sectionFilters.quickView.dateRange.endDate,
        daysInRange: Math.ceil((new Date(sectionFilters.quickView.dateRange.endDate).getTime() - new Date(sectionFilters.quickView.dateRange.startDate).getTime()) / (1000 * 60 * 60 * 24))
      }
    });

    // GSC Average Position: "topmost position... averaged across all impressions"
    // Each data point represents an impression, so we need to average across all impressions
    const allImpressionPositions: number[] = [];
    
    gscQueryData.forEach((item, index) => {
      if (item.position && item.position > 0 && item.query && item.impressions && item.impressions > 0) {
        // Each item represents impressions for a query on a specific date
        // We should weight the position by the number of impressions
        // But since we don't have individual impression positions, we use the position for all impressions of this query/date
        for (let i = 0; i < item.impressions; i++) {
          allImpressionPositions.push(item.position);
        }
        
        // Debug first few position entries
        if (index < 5) {
          console.log(`📊 Position entry ${index}:`, {
            query: item.query?.substring(0, 30),
            position: item.position,
            impressions: item.impressions,
            contributedPositions: item.impressions,
            date: item.date,
            source: item.source
          });
        }
      } else if (index < 5) {
        console.log(`⚠️ GSC query item without valid position/impressions:`, {
          position: item.position,
          impressions: item.impressions,
          query: item.query?.substring(0, 20),
          date: item.date,
          hasPosition: !!item.position,
          hasImpressions: !!item.impressions,
          positionValue: item.position,
          hasQuery: !!item.query,
          positionType: typeof item.position
        });
      }
    });

    // Calculate average position across all impressions (true GSC methodology)
    stats.avgPosition = allImpressionPositions.length > 0 
      ? allImpressionPositions.reduce((sum, pos) => sum + pos, 0) / allImpressionPositions.length 
      : 0;
      
    console.log('🎯 Average Position calculation result:', {
      totalImpressionPositions: allImpressionPositions.length,
      calculatedAvgPosition: stats.avgPosition,
      hasValidPosition: stats.avgPosition > 0,
      samplePositions: allImpressionPositions.slice(0, 20), // Show first 20 impression positions
      uniquePositionValues: [...new Set(allImpressionPositions)].sort((a, b) => a - b).slice(0, 10)
    });
    
    // Check if we have sufficient date coverage for position data
    const dateRangeStart = new Date(sectionFilters.quickView.dateRange.startDate);
    const dateRangeEnd = new Date(sectionFilters.quickView.dateRange.endDate);
    const totalDaysInRange = Math.ceil((dateRangeEnd.getTime() - dateRangeStart.getTime()) / (1000 * 60 * 60 * 24));
    const daysWithQueryData = queryDataDates.size;
    const coveragePercentage = (daysWithQueryData / totalDaysInRange) * 100;
    
    console.log('📊 Position data coverage analysis:', {
      totalDaysInRange,
      daysWithQueryData,
      coveragePercentage: coveragePercentage.toFixed(1) + '%',
      sufficientCoverage: coveragePercentage >= 10, // At least 10% coverage
      queryDataDates: Array.from(queryDataDates.keys()).sort()
    });
    
    // If we have very limited date coverage, use a different approach
    if (coveragePercentage < 10 && stats.avgPosition > 0) {
      console.log('⚠️ Limited position data coverage, using time-weighted approach...');
      
      // Group position data by date and calculate daily averages
      const dailyPositions = new Map<string, number[]>();
      quickViewFilteredData.forEach(item => {
        if (item.source === SOURCES.GSC && item.position && item.position > 0) {
          const positions = dailyPositions.get(item.date) || [];
          positions.push(item.position);
          dailyPositions.set(item.date, positions);
        }
      });
      
      // Calculate average position across all available dates
      let totalWeightedPosition = 0;
      let totalWeight = 0;
      
      dailyPositions.forEach((positions) => {
        const dailyAvg = positions.reduce((sum, pos) => sum + pos, 0) / positions.length;
        totalWeightedPosition += dailyAvg * positions.length; // Weight by number of queries
        totalWeight += positions.length;
      });
      
      if (totalWeight > 0) {
        const timeWeightedAvgPosition = totalWeightedPosition / totalWeight;
        console.log('🔄 Time-weighted position calculation:', {
          originalAvgPosition: stats.avgPosition,
          timeWeightedAvgPosition,
          datesWithData: dailyPositions.size,
          totalDataPoints: totalWeight,
          dailyAverages: Object.fromEntries(
            Array.from(dailyPositions.entries()).map(([date, positions]) => [
              date, 
              (positions.reduce((sum, pos) => sum + pos, 0) / positions.length).toFixed(2)
            ])
          )
        });
        
        // Use time-weighted average if it's significantly different
        stats.avgPosition = timeWeightedAvgPosition;
      }
    }
    
    // FALLBACK: If no position data at all, try using any GSC position data available
    if (stats.avgPosition === 0) {
      console.log('⚠️ No position data found, trying final fallback...');
      
      const allGSCPositions: number[] = [];
      quickViewFilteredData.forEach(item => {
        if (item.source === SOURCES.GSC && item.position && item.position > 0) {
          allGSCPositions.push(item.position);
        }
      });
      
      if (allGSCPositions.length > 0) {
        stats.avgPosition = allGSCPositions.reduce((sum, pos) => sum + pos, 0) / allGSCPositions.length;
        console.log('🔄 Final fallback position calculation:', {
          positionDataPoints: allGSCPositions.length,
          positions: allGSCPositions.slice(0, 10),
          fallbackAvgPosition: stats.avgPosition
        });
      } else {
        console.log('❌ No position data found in any GSC data');
      }
    }
    
    // Calculate CTR from filtered data: CTR = Total Clicks / Total Impressions
    stats.avgCTR = stats.totalImpressions > 0 ? stats.totalClicks / stats.totalImpressions : 0;

    console.log('📊 Quick Overview calculated stats:', {
      totalClicks: stats.totalClicks,
      totalImpressions: stats.totalImpressions,
      calculatedCTR: stats.avgCTR,
      calculatedCTRPercent: (stats.avgCTR * 100).toFixed(2) + '%',
      avgPosition: stats.avgPosition.toFixed(2),
      dataSourceBreakdown: {
        clicksFrom: 'GSC Time Series',
        impressionsFrom: 'GSC Time Series', 
        ctrFrom: 'Calculated (Clicks/Impressions)',
        positionFrom: 'GSC Query Data (Weighted by impressions)',
        timeSeriesDataPoints: gscTimeSeriesData.length,
        queryDataPoints: gscQueryData.length,
        totalImpressionPositions: allImpressionPositions.length
      },
      totalGSCDataPoints: quickViewFilteredData.filter(item => item.source === SOURCES.GSC).length
    });

    return stats;
  }, [quickViewData.data, sectionFilters.quickView.dateRange, sectionFilters.quickView.enableComparison, sectionFilters.quickView.comparisonPreset, quickViewData.loading]);

  // Comparison stats for Quick Overview (when comparison is enabled)
  const quickViewComparisonStats = useMemo(() => {
    if (!sectionFilters.quickView.enableComparison || !sectionFilters.quickView.comparisonDateRange) {
      return null;
    }

    // Filter data for comparison period
    const comparisonStartDate = new Date((sectionFilters.quickView.comparisonDateRange as any).startDate);
    const comparisonEndDate = new Date((sectionFilters.quickView.comparisonDateRange as any).endDate);
    
    const comparisonData = data.filter(item => {
      const itemDate = new Date(item.date);
      const dateMatch = itemDate >= comparisonStartDate && itemDate <= comparisonEndDate;
      // Use the same source filtering logic as the main data (currently includes all sources)
      return dateMatch;
    });

    console.log('📊 Comparison data breakdown:', {
      totalComparisonData: comparisonData.length,
      gscComparisonData: comparisonData.filter(item => item.source === SOURCES.GSC).length,
      comparisonDataSample: comparisonData.slice(0, 5),
      comparisonDataDates: [...new Set(comparisonData.map(item => item.date))].sort(),
      queryLevelComparisonData: comparisonData.filter(item => item.source === SOURCES.GSC && item.query && item.query !== 'Total').length
    });

    const comparisonStats = {
      totalClicks: 0,
      totalImpressions: 0,
      avgCTR: 0,
      avgPosition: 0,
    };

    if (comparisonData.length === 0) {
      console.log('⚠️ No comparison data for selected range');
      return { current: quickViewStats, previous: comparisonStats, changes: null };
    }

    // Separate GSC time series data (for totals) from query-level data (for averages) - COMPARISON PERIOD
    const comparisonGscTimeSeriesData = comparisonData.filter(item => 
      item.source === SOURCES.GSC && 
      (item.query === 'Total' || item.query === '' || !item.query)
    );
    
    const comparisonGscQueryData = comparisonData.filter(item => 
      item.source === SOURCES.GSC && 
      item.query && 
      item.query !== 'Total' && 
      item.query !== ''
    );
    
    console.log('📊 Comparison data breakdown:', {
      gscTimeSeries: comparisonGscTimeSeriesData.length,
      gscQueryLevel: comparisonGscQueryData.length,
      total: comparisonData.length,
      sampleTimeSeries: comparisonGscTimeSeriesData.slice(0, 3).map(item => ({
        date: item.date,
        clicks: item.clicks,
        impressions: item.impressions,
        query: item.query || 'Total'
      }))
    });

    // Calculate totals from GSC time series data (daily aggregates) - COMPARISON PERIOD
    comparisonGscTimeSeriesData.forEach(item => {
      comparisonStats.totalClicks += item.clicks || 0;
      comparisonStats.totalImpressions += item.impressions || 0;
    });

    // Calculate Average Position for comparison period using true GSC methodology
    // GSC Average Position: "topmost position... averaged across all impressions"
    const comparisonImpressionPositions: number[] = [];

    console.log('🎯 Comparison Average Position debugging:', {
      comparisonGscQueryDataCount: comparisonGscQueryData.length,
      comparisonGscQueryDataSample: comparisonGscQueryData.slice(0, 5).map(item => ({
        query: item.query,
        position: item.position,
        impressions: item.impressions,
        date: item.date,
        hasValidPosition: item.position && item.position > 0,
        hasValidImpressions: item.impressions && item.impressions > 0
      }))
    });

    comparisonGscQueryData.forEach(item => {
      // Only use GSC query data for position calculation - weight by impressions
      if (item.position && item.position > 0 && item.query && item.impressions && item.impressions > 0) {
        // Each item represents impressions for a query on a specific date
        // Weight the position by the number of impressions
        for (let i = 0; i < item.impressions; i++) {
          comparisonImpressionPositions.push(item.position);
        }
      }
    });

    console.log('🎯 Comparison position calculation result:', {
      totalImpressionPositions: comparisonImpressionPositions.length,
      calculatedAvgPosition: comparisonImpressionPositions.length > 0 
        ? comparisonImpressionPositions.reduce((sum, pos) => sum + pos, 0) / comparisonImpressionPositions.length 
        : 0,
      hasValidPosition: comparisonImpressionPositions.length > 0
    });

    // Calculate comparison period average position across all impressions (true GSC methodology)
    if (comparisonImpressionPositions.length > 0) {
      comparisonStats.avgPosition = comparisonImpressionPositions.reduce((sum, pos) => sum + pos, 0) / comparisonImpressionPositions.length;
    } else {
      // Fallback: If no query-level data for comparison period, use time-series position data if available
      const comparisonTimeSeriesWithPosition = comparisonGscTimeSeriesData.filter(item => item.position && item.position > 0);
      if (comparisonTimeSeriesWithPosition.length > 0) {
        // Weight by impressions if available
        const weightedPositions = comparisonTimeSeriesWithPosition.map(item => ({
          position: item.position,
          weight: item.impressions || 1
        }));
        const totalWeight = weightedPositions.reduce((sum, item) => sum + item.weight, 0);
        const weightedSum = weightedPositions.reduce((sum, item) => sum + (item.position * item.weight), 0);
        comparisonStats.avgPosition = totalWeight > 0 ? weightedSum / totalWeight : 0;
        
        console.log('🔄 Using time-series fallback for comparison position:', {
          timeSeriesWithPosition: comparisonTimeSeriesWithPosition.length,
          weightedAvgPosition: comparisonStats.avgPosition,
          fallbackMethod: 'time-series-weighted'
        });
      } else {
        comparisonStats.avgPosition = 0;
        console.log('⚠️ No position data available for comparison period');
      }
    }
    comparisonStats.avgCTR = comparisonStats.totalImpressions > 0 ? comparisonStats.totalClicks / comparisonStats.totalImpressions : 0;

    // Calculate percentage changes
    const changes = {
      clicksChange: comparisonStats.totalClicks > 0 ? 
        Math.round(((quickViewStats.totalClicks - comparisonStats.totalClicks) / comparisonStats.totalClicks) * 100) : 0,
      impressionsChange: comparisonStats.totalImpressions > 0 ? 
        Math.round(((quickViewStats.totalImpressions - comparisonStats.totalImpressions) / comparisonStats.totalImpressions) * 100) : 0,
      ctrChange: comparisonStats.avgCTR > 0 ? 
        Math.round(((quickViewStats.avgCTR - comparisonStats.avgCTR) / comparisonStats.avgCTR) * 100) : 0,
      positionChange: comparisonStats.avgPosition > 0 ? 
        Math.round(((comparisonStats.avgPosition - quickViewStats.avgPosition) / comparisonStats.avgPosition) * 100) : 0, // Note: lower position is better, so we flip the calculation
    };

    console.log('📈 Comparison results:', {
      current: quickViewStats,
      previous: comparisonStats,
      changes,
      comparisonImpressionPositions: comparisonImpressionPositions.length,
      comparisonSamplePositions: comparisonImpressionPositions.slice(0, 10)
    });

    return { current: quickViewStats, previous: comparisonStats, changes };
  }, [quickViewStats, sectionFilters.quickView.enableComparison, sectionFilters.quickView.comparisonDateRange, sectionFilters.quickView.dateRange.startDate, sectionFilters.quickView.dateRange.endDate, data]);

  

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setLoading(true);
    
    try {
      console.log('📊 Starting Ahrefs CSV import to MongoDB:', {
        fileName: file.name,
        fileSize: file.size
      });

      // Create FormData for file upload
      const formData = new FormData();
      formData.append('file', file);

      // Call the new MongoDB Ahrefs import API
      const response = await fetch('/api/ahrefs/import', {
        method: 'POST',
        body: formData
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || 'Failed to import Ahrefs data');
      }

      console.log('✅ Ahrefs import completed:', result);

      // Now fetch all data from MongoDB (both GSC and Ahrefs)
      const dataResponse = await fetch('/api/gsc/data-mongo?limit=50000');
      const dataResult = await dataResponse.json();

      if (!dataResponse.ok) {
        throw new Error(dataResult.error || 'Failed to load data from MongoDB');
      }

      console.log('📊 All data loaded from MongoDB:', {
        recordCount: dataResult.data.length
      });

      // Update the dashboard with all data
      setData(dataResult.data);

      // Auto-adjust section filters to show all data
      if (dataResult.data.length > 0) {
        const dates = dataResult.data.map((item: any) => item.date).sort();
        const earliestDate = dates[0];
        const latestDate = dates[dates.length - 1];
        
        const newDateRange = {
          startDate: earliestDate,
          endDate: latestDate
        };
        
        setSectionFilters(prev => ({
          chart: { 
            ...prev.chart, 
            dateRange: newDateRange,
            enableComparison: prev.chart.enableComparison,
            comparisonPreset: prev.chart.comparisonPreset,
            comparisonDateRange: prev.chart.comparisonDateRange
          },
          quickView: { 
            ...prev.quickView, 
            dateRange: newDateRange,
            enableComparison: prev.quickView.enableComparison,
            comparisonPreset: prev.quickView.comparisonPreset,
            comparisonDateRange: prev.quickView.comparisonDateRange
          },
          table: { 
            ...prev.table, 
            dateRange: newDateRange,
            enableComparison: prev.table.enableComparison,
            comparisonPreset: prev.table.comparisonPreset,
            comparisonDateRange: prev.table.comparisonDateRange
          }
        }));

        console.log('📅 Auto-adjusted filters to show all data:', newDateRange);
      }

      // Show success message
      alert(`✅ Ahrefs data imported successfully!\n\n${result.recordCount.toLocaleString()} records imported\n${result.replacedRecords > 0 ? `Replaced ${result.replacedRecords} existing records` : 'No existing data replaced'}\n\nAll data is now stored in MongoDB for fast access!`);

    } catch (error) {
      console.error('Failed to import Ahrefs CSV:', error);
      alert(`❌ Failed to import Ahrefs CSV: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setLoading(false);
      // Reset the file input
      event.target.value = '';
    }
  };

  const handleGSCData = async (gscData: NormalizedMetric[]) => {
    console.log('📊 handleGSCData called with:', {
      gscDataCount: gscData.length,
      gscSample: gscData.slice(0, 3),
      currentDataCount: data.length,
      currentAhrefsCount: data.filter(item => item.source === SOURCES.AHREFS).length
    });

    try {
      // Replace existing GSC data and merge with Ahrefs data
      const ahrefsData = data.filter(item => item.source === SOURCES.AHREFS);
      const newData = [...gscData, ...ahrefsData];
      
      // Analyze date range of imported data
      if (gscData.length > 0) {
        const dates = gscData.map(item => item.date).sort();
        const earliestDate = dates[0];
        const latestDate = dates[dates.length - 1];
        
        console.log('📅 Imported GSC data date range:', {
          earliest: earliestDate,
          latest: latestDate,
          totalDays: Math.ceil((new Date(latestDate).getTime() - new Date(earliestDate).getTime()) / (1000 * 60 * 60 * 24)),
          uniqueDates: [...new Set(dates)].length
        });
        
        // Auto-adjust section filters to match imported data range
        const dataDateRange = {
          startDate: earliestDate,
          endDate: latestDate
        };
        
        console.log('🔧 Auto-adjusting section filters to match imported data range');
        setSectionFilters({
          chart: { dateRange: dataDateRange, enableComparison: false, comparisonPreset: undefined, comparisonDateRange: undefined },
          quickView: { dateRange: dataDateRange, enableComparison: false, comparisonPreset: undefined, comparisonDateRange: undefined },
          table: { dateRange: dataDateRange, enableComparison: false, comparisonPreset: undefined, comparisonDateRange: undefined },
        });
      }
      
      console.log('📊 Setting new data:', {
        gscCount: gscData.length,
        ahrefsCount: ahrefsData.length,
        totalCount: newData.length,
        newDataSample: newData.slice(0, 3)
      });
      
      setData(newData);
      
      // Save to persistent storage
      await saveDataToStorage(newData);
      console.log('GSC data saved to storage');
    } catch (error) {
      console.error('Failed to save GSC data:', error);
      // Still update the UI even if storage fails
      const ahrefsData = data.filter(item => item.source === SOURCES.AHREFS);
      setData([...gscData, ...ahrefsData]);
    }
  };

  const downloadSampleCSV = () => {
    const sampleCSV = `Keyword,Current URL,Current position,Volume,KD,CPC,Current organic traffic,Current date,Previous organic traffic,Organic traffic change,Previous position,Position change,Previous date
seo reporting tool,https://example.com/seo-tools,3,1200,45,2.50,180,2024-01-01,150,-30,5,2,2023-12-01
keyword research,https://example.com/blog/keyword-research,7,800,35,1.80,120,2024-01-01,100,-20,9,2,2023-12-01
search console api,https://example.com/api-docs,12,500,25,3.20,80,2024-01-01,60,-20,15,3,2023-12-01`;
    
    const blob = new Blob([sampleCSV], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'ahrefs-sample.csv';
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      {/* Header */}
      <header className="bg-white dark:bg-gray-800 shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div className="flex items-center space-x-3">
              <BarChart3 className="h-8 w-8 text-blue-600" />
              <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
                Performance Metrics - Medcerts.com
              </h1>
            </div>
            <div className="flex items-center space-x-4">
              <span className="text-sm text-gray-600 dark:text-gray-400">
                Real-time SEO performance data
              </span>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Data Sources Section */}
        <div className="mb-8">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
            Data Sources
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Google Search Console */}
            <GSCConnection 
              onDataFetch={handleGSCData}
            />

            {/* Ahrefs CSV Upload */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Upload className="h-5 w-5 text-orange-600" />
                  <span>Ahrefs Data</span>
                </CardTitle>
                <CardDescription>
                  Upload CSV exports from Ahrefs for keyword and ranking data
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <input
                    type="file"
                    accept=".csv"
                    onChange={handleFileUpload}
                    className="hidden"
                    id="csv-upload"
                  />
                  <div className="space-y-3">
                    <Button 
                      variant="outline" 
                      className="w-full" 
                      disabled={loading}
                      onClick={() => {
                        const input = document.getElementById('csv-upload') as HTMLInputElement;
                        input?.click();
                      }}
                    >
                      <Upload className="h-4 w-4 mr-2" />
                      {loading ? 'Processing CSV...' : 'Upload CSV'}
                    </Button>
                    
                    <Button 
                      variant="ghost" 
                      size="sm"
                      className="w-full text-xs" 
                      onClick={downloadSampleCSV}
                    >
                      Download Sample CSV Format
                    </Button>
                  </div>
                  
                  <div className="p-3 bg-blue-50 dark:bg-blue-950/20 rounded-lg border border-blue-200 dark:border-blue-800">
                    <div className="text-sm">
                      <div className="font-medium text-blue-900 dark:text-blue-100 mb-2">💡 Ahrefs Export Tip</div>
                      <div className="text-blue-700 dark:text-blue-300 text-xs space-y-1">
                        <div>For best results, export Ahrefs data comparing two dates:</div>
                        <div><strong>Example:</strong> Today vs 90 days ago</div>
                        <div>This includes change columns: position change, traffic change, etc.</div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="text-xs text-gray-500 space-y-1">
                    <div className="font-medium">Expected columns:</div>
                    <div>keyword, url, position, volume, difficulty, cpc, traffic, date</div>
                    <div className="mt-2 text-gray-400">
                      <strong>File size limit:</strong> Up to 50MB supported
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Data Status */}
        {data.length > 0 && (
          <div className="mb-8">
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border p-6">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
                  Imported Data Status
                </h2>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={async () => {
                    if (confirm('Are you sure you want to clear all imported data? This cannot be undone.')) {
                      try {
                        await clearStoredData();
                        setData([]);
                        console.log('All data cleared');
                      } catch (error) {
                        console.error('Failed to clear data:', error);
                        alert('Failed to clear data. Please try again.');
                      }
                    }
                  }}
                  className="text-red-600 hover:text-red-700 hover:bg-red-50"
                >
                  Clear All Data
                </Button>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* GSC Data Status */}
                {data.some(item => item.source === 'gsc') && (
                  <div className="p-3 bg-blue-50 dark:bg-blue-950/20 rounded-lg border border-blue-200 dark:border-blue-800">
                    <div className="flex items-center space-x-2 mb-2">
                      <div className="w-2 h-2 rounded-full bg-blue-500"></div>
                      <span className="font-medium text-blue-900 dark:text-blue-100">Google Search Console</span>
                    </div>
                    <div className="text-sm text-blue-700 dark:text-blue-300">
                      {(() => {
                        const gscData = data.filter(item => item.source === 'gsc');
                        const dates = gscData.map(item => item.date).sort();
                        const startDate = dates[0];
                        const endDate = dates[dates.length - 1];
                        return (
                          <>
                            <div><strong>Date Range:</strong> {startDate} to {endDate}</div>
                            <div><strong>Data Points:</strong> {gscData.length.toLocaleString()}</div>
                          </>
                        );
                      })()}
                    </div>
                  </div>
                )}
                
                {/* Ahrefs Data Status */}
                {data.some(item => item.source === 'ahrefs') && (
                  <div className="p-3 bg-orange-50 dark:bg-orange-950/20 rounded-lg border border-orange-200 dark:border-orange-800">
                    <div className="flex items-center space-x-2 mb-2">
                      <div className="w-2 h-2 rounded-full bg-orange-500"></div>
                      <span className="font-medium text-orange-900 dark:text-orange-100">Ahrefs</span>
                    </div>
                    <div className="text-sm text-orange-700 dark:text-orange-300">
                      {(() => {
                        const ahrefsData = data.filter(item => item.source === 'ahrefs');
                        const dates = ahrefsData.map(item => item.date).sort();
                        const startDate = dates[0];
                        const endDate = dates[dates.length - 1];
                        return (
                          <>
                            <div><strong>Date Range:</strong> {startDate} to {endDate}</div>
                            <div><strong>Data Points:</strong> {ahrefsData.length.toLocaleString()}</div>
                          </>
                        );
                      })()}
                    </div>
                  </div>
                )}
              </div>
              
              {/* Overall Coverage */}
              <div className="mt-4 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                <div className="text-sm text-gray-700 dark:text-gray-300">
                  <strong>Total Coverage:</strong> {(() => {
                    const allDates = data.map(item => item.date).sort();
                    const startDate = allDates[0];
                    const endDate = allDates[allDates.length - 1];
                    return `${startDate} to ${endDate} (${data.length.toLocaleString()} total data points)`;
                  })()}
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Quick Overview */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <TrendingUp className="h-5 w-5" />
              <span>Quick Overview</span>
            </CardTitle>
            <CardDescription>
              Key performance metrics with independent date range and comparison controls
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Quick Overview-specific filters */}
            <SectionFilterPanel
              title="Overview Filters"
              description="Control date range and comparison for overview cards"
              icon={<TrendingUp className="h-4 w-4 text-green-500" />}
              filters={sectionFilters.quickView}
              onFiltersChange={(newFilters) => 
                setSectionFilters(prev => ({ ...prev, quickView: newFilters }))
              }
              className="border border-green-200 bg-green-50/50 dark:border-green-800 dark:bg-green-900/20"
            />
            
            {/* Overview date range and connection status */}
            <div className="flex items-center justify-between text-sm text-gray-600 dark:text-gray-400">
              <div className="flex items-center space-x-4">
                <span>Showing data for:</span>
                <ClientOnly>
                  <span>
                    {sectionFilters.quickView.dateRange.startDate && new Date(sectionFilters.quickView.dateRange.startDate).toLocaleDateString()} - {sectionFilters.quickView.dateRange.endDate && new Date(sectionFilters.quickView.dateRange.endDate).toLocaleDateString()}
                  </span>
                </ClientOnly>
              </div>
              <div className="flex items-center space-x-2">
                {isAuthenticated && selectedSite ? (
                  <div className="flex items-center space-x-1 text-green-600">
                    <div className="w-2 h-2 rounded-full bg-green-500"></div>
                    <span className="text-xs">GSC Connected</span>
                  </div>
                ) : (
                  <div className="flex items-center space-x-1 text-orange-600">
                    <div className="w-2 h-2 rounded-full bg-orange-500"></div>
                    <span className="text-xs">Connect GSC below</span>
                  </div>
                )}
              </div>
            </div>
            
            {/* Overview cards */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Total Clicks</CardTitle>
                <div className="flex items-center space-x-1">
                  {quickViewData.loading ? (
                    <div className="animate-spin h-4 w-4 border-2 border-gray-300 border-t-blue-600 rounded-full"></div>
                  ) : (
                    <>
                      {quickViewComparisonStats?.changes && (
                        <div className={`text-xs font-medium ${
                          quickViewComparisonStats.changes.clicksChange > 0 ? 'text-green-600' : 
                          quickViewComparisonStats.changes.clicksChange < 0 ? 'text-red-600' : 
                          'text-gray-500'
                        }`}>
                          {quickViewComparisonStats.changes.clicksChange > 0 ? '+' : ''}{quickViewComparisonStats.changes.clicksChange}%
                        </div>
                      )}
                      <TrendingUp className="h-4 w-4 text-muted-foreground" />
                    </>
                  )}
                </div>
              </CardHeader>
              <CardContent>
                {quickViewData.loading ? (
                  <div className="text-2xl font-bold text-gray-400">
                    Loading...
                  </div>
                ) : quickViewData.error ? (
                  <div className="text-2xl font-bold text-red-500">
                    Error
                  </div>
                ) : sectionFilters.quickView.enableComparison && quickViewComparisonStats?.changes ? (
                  <div>
                    <div className="text-lg font-bold text-gray-700 dark:text-gray-300">
                      {quickViewStats.totalClicks.toLocaleString()} vs {quickViewComparisonStats.previous.totalClicks.toLocaleString()}
                    </div>
                    <div className="text-xs text-muted-foreground mt-1">
                      Current vs Previous period
                    </div>
                  </div>
                ) : (
                  <div className="text-2xl font-bold">
                    {quickViewStats.totalClicks.toLocaleString()}
                  </div>
                )}
                <p className="text-xs text-muted-foreground mt-2">
                  {quickViewData.loading ? 'Loading data...' : 
                   quickViewData.error ? `Error: ${quickViewData.error}` :
                   `From ${quickViewData.data?.length || 0} data points`}
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Impressions</CardTitle>
                <div className="flex items-center space-x-1">
                  {quickViewData.loading ? (
                    <div className="animate-spin h-4 w-4 border-2 border-gray-300 border-t-blue-600 rounded-full"></div>
                  ) : (
                    <>
                      {quickViewComparisonStats?.changes && (
                        <div className={`text-xs font-medium ${
                          quickViewComparisonStats.changes.impressionsChange > 0 ? 'text-green-600' : 
                          quickViewComparisonStats.changes.impressionsChange < 0 ? 'text-red-600' : 
                          'text-gray-500'
                        }`}>
                          {quickViewComparisonStats.changes.impressionsChange > 0 ? '+' : ''}{quickViewComparisonStats.changes.impressionsChange}%
                        </div>
                      )}
                      <TrendingUp className="h-4 w-4 text-muted-foreground" />
                    </>
                  )}
                </div>
              </CardHeader>
              <CardContent>
                {quickViewData.loading ? (
                  <div className="text-2xl font-bold text-gray-400">
                    Loading...
                  </div>
                ) : quickViewData.error ? (
                  <div className="text-2xl font-bold text-red-500">
                    Error
                  </div>
                ) : sectionFilters.quickView.enableComparison && quickViewComparisonStats?.changes ? (
                  <div>
                    <div className="text-lg font-bold text-gray-700 dark:text-gray-300">
                      {quickViewStats.totalImpressions.toLocaleString()} vs {quickViewComparisonStats.previous.totalImpressions.toLocaleString()}
                    </div>
                    <div className="text-xs text-muted-foreground mt-1">
                      Current vs Previous period
                    </div>
                  </div>
                ) : (
                  <div className="text-2xl font-bold">
                    {quickViewStats.totalImpressions.toLocaleString()}
                  </div>
                )}
                <p className="text-xs text-muted-foreground mt-2">
                  {quickViewData.loading ? 'Loading data...' : 
                   quickViewData.error ? `Error: ${quickViewData.error}` :
                   'From GSC data'}
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Avg. CTR</CardTitle>
                <div className="flex items-center space-x-1">
                  {quickViewData.loading ? (
                    <div className="animate-spin h-4 w-4 border-2 border-gray-300 border-t-blue-600 rounded-full"></div>
                  ) : (
                    <>
                      {quickViewComparisonStats?.changes && (
                        <div className={`text-xs font-medium ${
                          quickViewComparisonStats.changes.ctrChange > 0 ? 'text-green-600' : 
                          quickViewComparisonStats.changes.ctrChange < 0 ? 'text-red-600' : 
                          'text-gray-500'
                        }`}>
                          {quickViewComparisonStats.changes.ctrChange > 0 ? '+' : ''}{quickViewComparisonStats.changes.ctrChange}%
                        </div>
                      )}
                      <TrendingUp className="h-4 w-4 text-muted-foreground" />
                    </>
                  )}
                </div>
              </CardHeader>
              <CardContent>
                {quickViewData.loading ? (
                  <div className="text-2xl font-bold text-gray-400">
                    Loading...
                  </div>
                ) : quickViewData.error ? (
                  <div className="text-2xl font-bold text-red-500">
                    Error
                  </div>
                ) : sectionFilters.quickView.enableComparison && quickViewComparisonStats?.changes ? (
                  <div>
                    <div className="text-lg font-bold text-gray-700 dark:text-gray-300">
                      {(quickViewStats.avgCTR * 100).toFixed(1)}% vs {(quickViewComparisonStats.previous.avgCTR * 100).toFixed(1)}%
                    </div>
                    <div className="text-xs text-muted-foreground mt-1">
                      Current vs Previous period
                    </div>
                  </div>
                ) : (
                  <div className="text-2xl font-bold">
                    {(quickViewStats.avgCTR * 100).toFixed(1)}%
                  </div>
                )}
                <p className="text-xs text-muted-foreground mt-2">
                  {quickViewData.loading ? 'Loading data...' : 
                   quickViewData.error ? `Error: ${quickViewData.error}` :
                   'Click-through rate'}
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Avg. Position</CardTitle>
                <div className="flex items-center space-x-1">
                  {quickViewData.loading ? (
                    <div className="animate-spin h-4 w-4 border-2 border-gray-300 border-t-blue-600 rounded-full"></div>
                  ) : (
                    <>
                      {quickViewComparisonStats?.changes && (
                        <div className={`text-xs font-medium ${
                          quickViewComparisonStats.changes.positionChange > 0 ? 'text-green-600' : 
                          quickViewComparisonStats.changes.positionChange < 0 ? 'text-red-600' : 
                          'text-gray-500'
                        }`}>
                          {quickViewComparisonStats.changes.positionChange > 0 ? '+' : ''}{quickViewComparisonStats.changes.positionChange}%
                        </div>
                      )}
                      <TrendingUp className="h-4 w-4 text-muted-foreground" />
                    </>
                  )}
                </div>
              </CardHeader>
              <CardContent>
                {quickViewData.loading ? (
                  <div className="text-2xl font-bold text-gray-400">
                    Loading...
                  </div>
                ) : quickViewData.error ? (
                  <div className="text-2xl font-bold text-red-500">
                    Error
                  </div>
                ) : sectionFilters.quickView.enableComparison && quickViewComparisonStats?.changes && quickViewStats.avgPosition > 0 ? (
                  <div>
                    <div className="text-lg font-bold text-gray-700 dark:text-gray-300">
                      {quickViewStats.avgPosition.toFixed(1)} vs {quickViewComparisonStats.previous.avgPosition.toFixed(1)}
                    </div>
                    <div className="text-xs text-muted-foreground mt-1">
                      Current vs Previous period
                    </div>
                  </div>
                ) : (
                  <div className="text-2xl font-bold">
                    {quickViewStats.avgPosition > 0 ? quickViewStats.avgPosition.toFixed(1) : 'N/A'}
                  </div>
                )}
                <p className="text-xs text-muted-foreground mt-2">
                  {quickViewData.loading ? 'Loading data...' : 
                   quickViewData.error ? `Error: ${quickViewData.error}` :
                   'Average ranking position'}
                </p>
              </CardContent>
            </Card>
          </div>
          </CardContent>
        </Card>

        {/* Charts and Tables */}
        <div className="space-y-8">
          {/* Performance Charts - TEMPORARILY DISABLED */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <BarChart3 className="h-5 w-5 text-gray-400" />
                <span className="text-gray-500">Performance Charts (Temporarily Disabled)</span>
              </CardTitle>
              <CardDescription>
                Charts are temporarily disabled to prevent browser freezing. Working on Quick View optimization first.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="p-8 text-center text-gray-500 bg-gray-50 dark:bg-gray-800 rounded-lg">
                <BarChart3 className="h-12 w-12 mx-auto mb-4 text-gray-300" />
                <p>Charts will be re-enabled after Quick View optimization is complete</p>
              </div>
            </CardContent>
          </Card>

          {/* Performance Data Tables - TEMPORARILY DISABLED */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <BarChart3 className="h-5 w-5 text-gray-400" />
                <span className="text-gray-500">Data Tables (Temporarily Disabled)</span>
              </CardTitle>
              <CardDescription>
                Tables are temporarily disabled to prevent browser freezing. Working on Quick View optimization first.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="p-8 text-center text-gray-500 bg-gray-50 dark:bg-gray-800 rounded-lg">
                <BarChart3 className="h-12 w-12 mx-auto mb-4 text-gray-300" />
                <p>Tables will be re-enabled after Quick View optimization is complete</p>
              </div>
            </CardContent>
          </Card>

          {/* Performance Clusters */}
          <PerformanceClusters
            data={filteredData}
            filters={filters}
          />
        </div>
      </main>
    </div>
  );
}